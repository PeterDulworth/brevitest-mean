"use strict";function parse_bcode_data(bcode_str){var data=bcode_str.split("\n"),result="";return data.forEach(function(e){var c,indx=e.indexOf(",");c=-1===indx?e:e.substring(0,indx),result+=bcode[c]+"  [ "+(-1!==indx?e.substring(indx+1):e)+" ]<br/>"}),result}function string_to_datetime(str){return new Date(1e3*parseInt(str))}function string_to_datetime_string(str){var dt=string_to_datetime(str);return dt.toLocaleDateString()+"<br/>"+dt.toLocaleTimeString()}function parse_sensor_reading(str){var data=str.split("	"),result="<tr><td>"+("A"===data[0]?"Assay":"Control")+"</td>";return result+="<td>"+(parseInt(data[1],10)?"Result":"Baseline")+"</td>",result+="<td>"+string_to_datetime_string(data[2])+"</td>",result+="<td>"+data[3]+"<td/></tr>"}function parse_test_header(str){var data=str.split("	"),result="<strong>TEST INFORMATION</strong><br/>";return result+="Record number: "+data[0]+"<br/>",result+="Test start time: "+string_to_datetime_string(data[1])+"<br/>",result+="Test finish time: "+string_to_datetime_string(data[2])+"<br/>",result+="Cartridge ID: "+data[3]+"<br/>",result+="BCODE version: "+data[4]+"<br/>",result+="BCODE length: "+data[5]+"<br/>",result+="Integration time: "+int_time[parseInt(data[6],10)]+"<br/>",result+="Gain: "+gain[parseInt(data[7],10)]+"<br/>",result+="<br/>"}function parse_test_params(str){var data=str.split("	"),result="<strong>DEVICE PARAMETERS</strong><br/>";return result+="step_delay_us: "+data[0]+"<br/>",result+="stepper_wifi_ping_rate: "+data[1]+"<br/>",result+="stepper_wake_delay_ms: "+data[2]+"<br/>",result+="solenoid_surge_power: "+data[3]+"<br/>",result+="solenoid_surge_period_ms: "+data[4]+"<br/>",result+="solenoid_sustain_power: "+data[5]+"<br/>",result+="sensor_params: "+parseInt(data[6],16).toString()+"<br/>",result+="sensor_ms_between_samples: "+data[7]+"<br/>",result+="sensor_led_power: "+data[8]+"<br/>",result+="sensor_led_warmup_ms: "+data[9]+"<br/>",result+="<br/>"}function parse_test_data(test_str){var i,data=test_str.split("\n"),result=parse_test_header(data[0]);for(result+=parse_test_params(data[1]),result+="<br/><strong>SENSOR READINGS</strong><br/>",result+='<table class="table table-striped">'+sparkSensorHeader,i=2;6>i;i+=1)result+=parse_sensor_reading(data[i]);return result+="</table>"}var ApplicationConfiguration=function(){var applicationModuleName="brevitest",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui-notification","btford.socket-io"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("assays"),angular.module("assays").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAssays",{url:"/assays",templateUrl:"modules/assays/views/list-assays.client.view.html"}).state("createAssay",{url:"/assays/create",templateUrl:"modules/assays/views/create-assay.client.view.html"}).state("viewAssay",{url:"/assays/:assayId",templateUrl:"modules/assays/views/view-assay.client.view.html"}).state("editAssay",{url:"/assays/:assayId/edit",templateUrl:"modules/assays/views/edit-assay.client.view.html"})}]);var _=window._;angular.module("assays").controller("AssaysController",["$scope","$http","$stateParams","$location","Authentication","Assays","Notification",function($scope,$http,$stateParams,$location,Authentication,Assays,Notification){function instruction_time(code,param){var d=0;switch(code){case"Delay":case"Solenoid On":d=parseInt(param);break;case"Move":d=Math.floor(Math.abs(parseInt(param[0]))*parseInt(param[1])/1e3);break;case"Blink Device LED":d=2*Math.floor(parseInt(param[0])*parseInt(param[1]));break;case"Read Sensors":d=5e3;break;case"Start Test":d=6e3}return d}function get_bcode_object(bcode){var indx=bcode.params.toString().indexOf(",");return{c:bcode.command,p:-1!==indx?bcode.params.split(","):bcode.params.toString()}}function calculate_BCODE_time(bcode_array){var a,b,i,level,t,duration=0;for(i=0;i<bcode_array.length;i+=1)if(bcode_array[i])switch(b=get_bcode_object(bcode_array[i]),b.c){case"Finish Test":case"Repeat End":return duration+instruction_time(b.c,b.p);case"":break;case"Repeat Begin":a=[],level=1;do{if(i+=1,i===bcode_array.length)return-1;t=get_bcode_object(bcode_array[i]),"Repeat Begin"===t.c&&(level+=1),"Repeat End"===t.c&&(level-=1),a.push(bcode_array[i])}while("Repeat End"!==t.c||0!==level);duration+=calculate_BCODE_time(a)*parseInt(b.p);break;default:duration+=instruction_time(b.c,b.p)}return-1}function get_BCODE_duration(a){var duration=0,repLevel=0;if(a&&a.length){if(a.forEach(function(e){"Repeat Begin"===e.command&&(repLevel+=1),"Repeat End"===e.command&&(repLevel-=1)}),0!==repLevel)return-1;duration=calculate_BCODE_time(a)}return duration/1e3}function validateCommandParams(){if(!$scope.command)return Notification.error("ERROR: No command selected"),!1;var cmd=_.findWhere($scope.BCODECommands,{name:$scope.command}),p=$scope.params.split(",");if(0===cmd.param_count&&1===p.length&&""===p[0])return!0;if(p.length!==cmd.param_count)return Notification.error("ERROR: Wrong number of parameters ("+p.length+" found and "+cmd.param_count+" expected)"),!1;if(p.length>0&&p[0]){if(isNaN(parseInt(p[0],10)))return Notification.error('ERROR: Non-numeric parameter (parameter 1 "'+p[0]+'" is not a number)'),!1;$scope.params=parseInt(p[0])}if(p.length>1){if(isNaN(parseInt(p[1],10)))return Notification.error('ERROR: Non-numeric parameter (parameter 2 "'+p[1]+'" is not a number)'),!1;$scope.params+=","+parseInt(p[1])}return!0}$scope.authentication=Authentication,$scope.analysis={},$scope.standardCurve=[];var initialBCODE=[{command:"Start Test",params:"0,0"},{command:"Read Sensors",params:""},{command:"Finish Test",params:""}];$scope.BCODE=angular.copy(initialBCODE),$scope.cartridgeInventory=0,$scope.recalcInventory=function(){$http.get("/cartridges/get_inventory/"+$scope.assay._id).success(function(data,status,headers,config){$scope.cartridgeInventory=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.make10Cartridges=function(){console.log("Making 10 cartridges"),$http.post("/assays/make10cartridges",{assay:$scope.assay}).success(function(data,status,headers,config){$scope.cartridgeInventory=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.stdCurveSort=function(){$scope.standardCurve.sort(function(a,b){return a.x-b.x})},$scope.stdCurveAppend=function(){$scope.standardCurve.push({x:0,y:0})},$scope.stdCurvePrepend=function(){$scope.standardCurve.splice(0,0,{x:0,y:0})},$scope.stdCurveDelete=function(indx){$scope.standardCurve.splice(indx,1)},$scope.BCODECommands=[{num:"0",name:"Start Test",param_count:2,canMove:!1,canDelete:!1,canInsert:!1,description:"Starts the test. Required to be the first command. Test executes until Finish Test command. Parameters are (sensor integration time, sensor gain)."},{num:"1",name:"Delay",param_count:1,canMove:!0,canDelete:!0,canInsert:!0,description:"Waits for specified period of time. Parameter is (delay in milliseconds)."},{num:"2",name:"Move",param_count:2,canMove:!0,canDelete:!0,canInsert:!0,description:"Moves the stage a specified number of steps at a specified speed. Parameters are (number of steps, step delay time in microseconds)."},{num:"3",name:"Solenoid On",param_count:1,canMove:!0,canDelete:!0,canInsert:!0,description:"Energizes the solenoid for a specified amount of time. Parameter is (energize period in milliseconds)."},{num:"4",name:"Device LED On",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Turns on the device LED, which is visible outside the device. No parameters."},{num:"5",name:"Device LED Off",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Turns off the device LED. No parameters."},{num:"6",name:"Device LED Blink",param_count:2,canMove:!0,canDelete:!0,canInsert:!0,description:"Blinks the device LED at a specified rate. Parameters, (number of blinks, period in milliseconds between change in LED state)."},{num:"7",name:"Sensor LED On",param_count:1,canMove:!0,canDelete:!0,canInsert:!0,description:"Turns on the sensor LED at a given power. Parameter is (power, from 0 to 255)."},{num:"8",name:"Sensor LED Off",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Turns off the sensor LED. No parameters."},{num:"9",name:"Read Sensors",param_count:0,canMove:!0,canDelete:!1,canInsert:!1,description:"Takes readings from the sensors. No parameters. Only one allowed per assay"},{num:"10",name:"Read QR Code",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Reads the cartridge QR code. No parameters. [NOT IMPLEMENTED]"},{num:"11",name:"Disable Sensor",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Disables the sensors, switching them to low-power mode. No parameters."},{num:"12",name:"Repeat Begin",param_count:1,canMove:!0,canDelete:!0,canInsert:!0,description:"Begins a block of commands that will be repeated a specified number of times. Nesting is acceptable. Parameter is (number of interations)."},{num:"13",name:"Repeat End",param_count:0,canMove:!0,canDelete:!0,canInsert:!0,description:"Ends the innermost block of repeated commands. No parameters."},{num:"99",name:"Finish Test",param_count:0,canMove:!1,canDelete:!1,canInsert:!1,description:"Finishes the test. Required to be the final command. No parameters."}],$scope.activeBCODE=0,$scope.command=$scope.BCODE[0].command,$scope.params=$scope.BCODE[0].params,$scope.commandDescription=$scope.BCODECommands[0].description,$scope.canMove=!1,$scope.canDelete=!1,$scope.canInsert=!1,$scope.estimatedTime=get_BCODE_duration($scope.BCODE),$scope.changeCommand=function(){$scope.params="";var b=_.findWhere($scope.BCODECommands,{name:$scope.command});$scope.canMove=b.canMove,$scope.canDelete=b.canDelete,$scope.canInsert=b.canInsert,$scope.commandDescription=b.description,console.log($scope.activeBCODE,$scope.command,$scope.canMove,$scope.canDelete,$scope.canInsert)},$scope.clickBCODECode=function(indx){$scope.activeBCODE=indx,$scope.command=$scope.BCODE[indx].command,$scope.params=$scope.BCODE[indx].params;var b=_.findWhere($scope.BCODECommands,{name:$scope.command});$scope.canMove=b.canMove,$scope.canDelete=b.canDelete,$scope.canInsert=b.canInsert,$scope.commandDescription=b.description,console.log($scope.activeBCODE,$scope.command,$scope.canMove,$scope.canDelete,$scope.canInsert)},$scope.moveBCODETop=function(){$scope.canMove&&($scope.BCODE.splice(1,0,$scope.BCODE.splice($scope.activeBCODE,1)[0]),$scope.activeBCODE=1,$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.moveBCODEUp=function(){var code;$scope.activeBCODE>1&&$scope.canMove&&(code=$scope.BCODE.splice($scope.activeBCODE,1)[0],$scope.activeBCODE-=1,$scope.activeBCODE=$scope.activeBCODE<0?0:$scope.activeBCODE,$scope.BCODE.splice($scope.activeBCODE,0,code),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.moveBCODEDown=function(){var code;$scope.activeBCODE<$scope.BCODE.length-2&&$scope.canMove&&(code=$scope.BCODE.splice($scope.activeBCODE,1)[0],$scope.activeBCODE+=1,$scope.activeBCODE=$scope.activeBCODE>$scope.BCODE.length?$scope.BCODE.length:$scope.activeBCODE,$scope.BCODE.splice($scope.activeBCODE,0,code),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.moveBCODEBottom=function(){$scope.canMove&&($scope.BCODE.splice($scope.BCODE.length-2,0,$scope.BCODE.splice($scope.activeBCODE,1)[0]),$scope.activeBCODE=$scope.BCODE.length-2,$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.insertBCODETop=function(){validateCommandParams()&&$scope.canInsert&&($scope.BCODE.splice(1,0,{command:$scope.command,params:$scope.params}),$scope.activeBCODE=1,$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.insertBCODEAbove=function(){validateCommandParams()&&$scope.activeBCODE>0&&$scope.canInsert&&($scope.BCODE.splice($scope.activeBCODE,0,{command:$scope.command,params:$scope.params}),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.insertBCODEBelow=function(){validateCommandParams()&&$scope.activeBCODE<$scope.BCODE.length-1&&$scope.canInsert&&($scope.activeBCODE+=1,$scope.BCODE.splice($scope.activeBCODE,0,{command:$scope.command,params:$scope.params}),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.insertBCODEBottom=function(){validateCommandParams()&&$scope.canInsert&&($scope.BCODE.splice($scope.BCODE.length-1,0,{command:$scope.command,params:$scope.params}),$scope.activeBCODE=$scope.BCODE.length-2,$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.cutBCODE=function(){$scope.BCODE.length&&$scope.activeBCODE&&$scope.canDelete&&($scope.clipboard=$scope.BCODE.splice($scope.activeBCODE,1),delete $scope.clipboard._id,$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.copyBCODE=function(){$scope.clipboard=$scope.BCODE[$scope.activeBCODE]},$scope.copyAllBCODE=function(){$scope.clipboard=_.filter($scope.BCODE.slice(1,$scope.BCODE.length-2),function(e){return"Read Sensors"!==e.command})},$scope.pasteBCODE=function(){$scope.activeBCODE>0&&$scope.activeBCODE<$scope.BCODE.length-1&&($scope.activeBCODE+=1,angular.isArray($scope.clipboard)?$scope.clipboard.forEach(function(e,i){$scope.BCODE.splice($scope.activeBCODE+i,0,angular.copy(e))}):$scope.BCODE.splice($scope.activeBCODE,0,angular.copy($scope.clipboard)),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.updateBCODE=function(){validateCommandParams()&&($scope.BCODE[$scope.activeBCODE]={command:$scope.command,params:$scope.params},$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.deleteBCODE=function(){$scope.BCODE.length&&$scope.activeBCODE&&$scope.canDelete&&($scope.BCODE.splice($scope.activeBCODE,1),$scope.estimatedTime=get_BCODE_duration($scope.BCODE))},$scope.deleteAllBCODE=function(){$scope.BCODE=angular.copy(initialBCODE),$scope.estimatedTime=get_BCODE_duration($scope.BCODE)},$scope.saveBCODE=function(){var assay=$scope.assay;assay.BCODE=$scope.BCODE,assay.analysis=$scope.analysis,assay.$update(function(){$location.path("assays/"+assay._id+"/edit")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.revertBCODE=function(){$scope.findOne()},$scope.create=function(){var assay=new Assays({name:this.name,reference:this.reference,description:this.description,url:this.url,analysis:this.analysis,standardCurve:this.standardCurve,BCODE:this.BCODE});assay.$save(function(response){$location.path("assays/"+response._id),$scope.name="",$scope.reference="",$scope.description="",$scope.url="",$scope.analysis={},$scope.standardCurve=[],$scope.BCODE=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(assay){if(assay){assay.$remove();for(var i in $scope.assays)$scope.assays[i]===assay&&$scope.assays.splice(i,1)}else $scope.assay.$remove(function(){$location.path("assays")})},$scope.update=function(){var assay=$scope.assay;assay.BCODE=$scope.BCODE,assay.analysis=$scope.analysis,assay.standardCurve=$scope.standardCurve,assay.$update(function(){$location.path("assays/"+assay._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.assays=Assays.query()},$scope.findOne=function(){$scope.assay=Assays.get({assayId:$stateParams.assayId},function(){$scope.BCODE=$scope.assay.BCODE&&$scope.assay.BCODE.length?$scope.assay.BCODE:$scope.BCODE,$scope.BCODE.length&&($scope.activeBCODE=0,$scope.command=$scope.BCODE[0].command,$scope.params=$scope.BCODE[0].params,$scope.commandDescription=_.findWhere($scope.BCODECommands,{name:$scope.command}).description,$scope.estimatedTime=get_BCODE_duration($scope.BCODE)),$scope.analysis=$scope.assay.analysis,$scope.standardCurve=$scope.assay.standardCurve,$scope.recalcInventory()})}}]);var bcode={0:"Start Test",1:"Delay",2:"Move",3:"Solenoid On",4:"Device LED On",5:"Device LED Off",6:"Device LED Blink",7:"Sensor LED On",8:"Sensor LED Off",9:"Read Sensors",10:"Read QR Code",11:"Disable Sensor",12:"Repeat Begin",13:"Repeat End",14:"Status",99:"Finish Test"};angular.module("assays").filter("bcode",[function(){return function(input){var out;return angular.isString(input)&&(input=input||"",out=parse_bcode_data(input)),out}}]),angular.module("assays").factory("Assays",["$resource",function($resource){return $resource("assays/:assayId",{assayId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Assays Controller Tests",function(){var AssaysController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,AssaysController=$controller("AssaysController",{$scope:scope})})),it("$scope.find() should create an array with at least one Assay object fetched from XHR",inject(function(Assays){var sampleAssay=new Assays({name:"New Assay"}),sampleAssays=[sampleAssay];$httpBackend.expectGET("assays").respond(sampleAssays),scope.find(),$httpBackend.flush(),expect(scope.assays).toEqualData(sampleAssays)})),it("$scope.findOne() should create an array with one Assay object fetched from XHR using a assayId URL parameter",inject(function(Assays){var sampleAssay=new Assays({name:"New Assay",analysis:{},standardCurve:[],BCODE:[]});$stateParams.assayId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/assays\/([0-9a-fA-F]{24})$/).respond(sampleAssay),scope.findOne(),$httpBackend.flush(),expect(scope.assay).toEqualData(sampleAssay)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Assays){var sampleAssayPostData=new Assays({name:"New Assay",analysis:{},standardCurve:[],BCODE:[]}),sampleAssayResponse=new Assays({_id:"525cf20451979dea2c000001",name:"New Assay"});scope.name="New Assay",$httpBackend.expectPOST("assays",sampleAssayPostData).respond(sampleAssayResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/assays/"+sampleAssayResponse._id)})),it("$scope.update() should update a valid Assay",inject(function(Assays){var sampleAssayPutData=new Assays({_id:"525cf20451979dea2c000001",name:"New Assay"});scope.assay=sampleAssayPutData,$httpBackend.expectPUT(/assays\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/assays/"+sampleAssayPutData._id)})),it("$scope.remove() should send a DELETE request with a valid assayId and remove the Assay from the scope",inject(function(Assays){var sampleAssay=new Assays({_id:"525a8422f6d0f87f0e407a33"});scope.assays=[sampleAssay],$httpBackend.expectDELETE(/assays\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleAssay),$httpBackend.flush(),expect(scope.assays.length).toBe(0)}))})}(),ApplicationConfiguration.registerModule("cartridges"),angular.module("cartridges").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCartridges",{url:"/cartridges",templateUrl:"modules/cartridges/views/list-cartridges.client.view.html"}).state("loadCartridges",{url:"/cartridges/load",templateUrl:"modules/cartridges/views/list-cartridges.client.view.html"}).state("createCartridge",{url:"/cartridges/create",templateUrl:"modules/cartridges/views/create-cartridge.client.view.html"}).state("viewCartridge",{url:"/cartridges/:cartridgeId",templateUrl:"modules/cartridges/views/view-cartridge.client.view.html"}).state("editCartridge",{url:"/cartridges/:cartridgeId/edit",templateUrl:"modules/cartridges/views/edit-cartridge.client.view.html"})}]),angular.module("cartridges").controller("CartridgesController",["$scope","$http","$stateParams","$location","Authentication","Notification","Cartridges","Assays",function($scope,$http,$stateParams,$location,Authentication,Notification,Cartridges,Assays){$scope.authentication=Authentication,$scope.showResultsOnOpen=!0,$scope.create=function(){var cartridge=new Cartridges({name:this.name});cartridge.$save(function(response){$location.path("cartridges/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(cartridge){if(cartridge){cartridge.$remove();for(var i in $scope.cartridges)$scope.cartridges[i]===cartridge&&$scope.cartridges.splice(i,1)}else $scope.cartridge.$remove(function(){$location.path("cartridges")})},$scope.update=function(){var cartridge=$scope.cartridge;cartridge.$update(function(){$location.path("cartridges/"+cartridge._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.cartridges=Cartridges.query()},$scope.currentPage=0,$scope.pageChanged=function(){console.log($scope.currentPage),$scope.load()},$scope.load=function(){$http.post("/cartridges/load",{page:$scope.currentPage,pageSize:$scope.itemsPerPage}).success(function(data,status,headers,config){console.log(data),$scope.cartridges=data.cartridges,$scope.totalItems=data.number_of_items}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.findOne=function(){$scope.cartridge=Cartridges.get({cartridgeId:$stateParams.cartridgeId})}}]),angular.module("cartridges").factory("Cartridges",["$resource",function($resource){return $resource("cartridges/:cartridgeId",{cartridgeId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Cartridges Controller Tests",function(){var CartridgesController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,CartridgesController=$controller("CartridgesController",{$scope:scope})})),it("$scope.find() should create an array with at least one Cartridge object fetched from XHR",inject(function(Cartridges){var sampleCartridge=new Cartridges({name:"New Cartridge"}),sampleCartridges=[sampleCartridge];$httpBackend.expectGET("cartridges").respond(sampleCartridges),scope.find(),$httpBackend.flush(),expect(scope.cartridges).toEqualData(sampleCartridges)})),it("$scope.findOne() should create an array with one Cartridge object fetched from XHR using a cartridgeId URL parameter",inject(function(Cartridges){var sampleCartridge=new Cartridges({name:"New Cartridge"});$stateParams.cartridgeId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/cartridges\/([0-9a-fA-F]{24})$/).respond(sampleCartridge),scope.findOne(),$httpBackend.flush(),expect(scope.cartridge).toEqualData(sampleCartridge)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Cartridges){var sampleCartridgePostData=new Cartridges({name:"New Cartridge"}),sampleCartridgeResponse=new Cartridges({_id:"525cf20451979dea2c000001",name:"New Cartridge"});scope.name="New Cartridge",$httpBackend.expectPOST("cartridges",sampleCartridgePostData).respond(sampleCartridgeResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/cartridges/"+sampleCartridgeResponse._id)})),it("$scope.update() should update a valid Cartridge",inject(function(Cartridges){var sampleCartridgePutData=new Cartridges({_id:"525cf20451979dea2c000001",name:"New Cartridge"});scope.cartridge=sampleCartridgePutData,$httpBackend.expectPUT(/cartridges\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/cartridges/"+sampleCartridgePutData._id)})),it("$scope.remove() should send a DELETE request with a valid cartridgeId and remove the Cartridge from the scope",inject(function(Cartridges){var sampleCartridge=new Cartridges({_id:"525a8422f6d0f87f0e407a33"});scope.cartridges=[sampleCartridge],$httpBackend.expectDELETE(/cartridges\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleCartridge),$httpBackend.flush(),expect(scope.cartridges.length).toBe(0)}))})}(),angular.module("core").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Create New","new","dropdown",""),Menus.addSubMenuItem("topbar","new","Assay","assays/create"),Menus.addSubMenuItem("topbar","new","Device","devices/create"),Menus.addSubMenuItem("topbar","new","Device Model","device-models/create"),Menus.addSubMenuItem("topbar","new","Prescription","prescriptions/create"),Menus.addMenuItem("topbar","View","view","dropdown",""),Menus.addSubMenuItem("topbar","view","Assays","assays"),Menus.addSubMenuItem("topbar","view","Devices","devices"),Menus.addSubMenuItem("topbar","view","Device Models","device-models"),Menus.addSubMenuItem("topbar","view","Prescriptions","prescriptions"),Menus.addSubMenuItem("topbar","view","Sparks","sparks")}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),ApplicationConfiguration.registerModule("core"),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("core").factory("Socket",["socketFactory","$location",function(socketFactory,$location){return console.log("socket.io $location",$location),socketFactory({prefix:"",ioSocket:io.connect($location.protocol()+"://"+$location.host()+":"+$location.port())})}]),function(){describe("HeaderController",function(){var scope,HeaderController;beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope){scope=$rootScope.$new(),HeaderController=$controller("HeaderController",{$scope:scope})})),it("should expose the authentication service",function(){expect(scope.authentication).toBeTruthy()})})}(),function(){describe("HomeController",function(){var scope,HomeController;beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope){scope=$rootScope.$new(),HomeController=$controller("HomeController",{$scope:scope})})),it("should expose the authentication service",function(){expect(scope.authentication).toBeTruthy()})})}(),angular.module("device-models").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDeviceModels",{url:"/device-models",templateUrl:"modules/device-models/views/list-device-models.client.view.html"}).state("createDeviceModel",{url:"/device-models/create",templateUrl:"modules/device-models/views/create-device-model.client.view.html"}).state("viewDeviceModel",{url:"/device-models/:deviceModelId",templateUrl:"modules/device-models/views/view-device-model.client.view.html"}).state("editDeviceModel",{url:"/device-models/:deviceModelId/edit",templateUrl:"modules/device-models/views/edit-device-model.client.view.html"})}]),angular.module("device-models").controller("DeviceModelsController",["$scope","$http","$stateParams","$location","Authentication","DeviceModels","Devices",function($scope,$http,$stateParams,$location,Authentication,DeviceModels,Devices){$scope.authentication=Authentication,$scope.loadDevices=function(){$scope.devices||$http.post("/devices/load_by_model",{deviceModelID:$scope.deviceModel._id}).success(function(data,status,headers,config){$scope.devices=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.create=function(){var deviceModel=new DeviceModels({name:this.name,reference:this.reference,description:this.description});deviceModel.$save(function(response){$location.path("device-models/"+response._id),
$scope.name="",$scope.reference="",$scope.description=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(deviceModel){if(deviceModel){deviceModel.$remove();for(var i in $scope.deviceModels)$scope.deviceModels[i]===deviceModel&&$scope.deviceModels.splice(i,1)}else $scope.deviceModel.$remove(function(){$location.path("device-models")})},$scope.update=function(){var deviceModel=$scope.deviceModel;deviceModel.$update(function(){$location.path("device-models/"+deviceModel._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.deviceModels=DeviceModels.query()},$scope.findOne=function(){$scope.deviceModel=DeviceModels.get({deviceModelId:$stateParams.deviceModelId})}}]),ApplicationConfiguration.registerModule("device-models"),angular.module("device-models").factory("DeviceModels",["$resource",function($resource){return $resource("device-models/:deviceModelId",{deviceModelId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Device models Controller Tests",function(){var DeviceModelsController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,DeviceModelsController=$controller("DeviceModelsController",{$scope:scope})})),it("$scope.find() should create an array with at least one Device model object fetched from XHR",inject(function(DeviceModels){var sampleDeviceModel=new DeviceModels({name:"New Device model"}),sampleDeviceModels=[sampleDeviceModel];$httpBackend.expectGET("device-models").respond(sampleDeviceModels),scope.find(),$httpBackend.flush(),expect(scope.deviceModels).toEqualData(sampleDeviceModels)})),it("$scope.findOne() should create an array with one Device model object fetched from XHR using a deviceModelId URL parameter",inject(function(DeviceModels){var sampleDeviceModel=new DeviceModels({name:"New Device model"});$stateParams.deviceModelId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/device-models\/([0-9a-fA-F]{24})$/).respond(sampleDeviceModel),scope.findOne(),$httpBackend.flush(),expect(scope.deviceModel).toEqualData(sampleDeviceModel)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(DeviceModels){var sampleDeviceModelPostData=new DeviceModels({name:"New Device model"}),sampleDeviceModelResponse=new DeviceModels({_id:"525cf20451979dea2c000001",name:"New Device model"});scope.name="New Device model",$httpBackend.expectPOST("device-models",sampleDeviceModelPostData).respond(sampleDeviceModelResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/device-models/"+sampleDeviceModelResponse._id)})),it("$scope.update() should update a valid Device model",inject(function(DeviceModels){var sampleDeviceModelPutData=new DeviceModels({_id:"525cf20451979dea2c000001",name:"New Device model"});scope.deviceModel=sampleDeviceModelPutData,$httpBackend.expectPUT(/device-models\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/device-models/"+sampleDeviceModelPutData._id)})),it("$scope.remove() should send a DELETE request with a valid deviceModelId and remove the Device model from the scope",inject(function(DeviceModels){var sampleDeviceModel=new DeviceModels({_id:"525a8422f6d0f87f0e407a33"});scope.deviceModels=[sampleDeviceModel],$httpBackend.expectDELETE(/device-models\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleDeviceModel),$httpBackend.flush(),expect(scope.deviceModels.length).toBe(0)}))})}(),angular.module("devices").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDevices",{url:"/devices",templateUrl:"modules/devices/views/list-devices.client.view.html"}).state("createDevice",{url:"/devices/create",templateUrl:"modules/devices/views/create-device.client.view.html"}).state("viewDevice",{url:"/devices/:deviceId",templateUrl:"modules/devices/views/view-device.client.view.html"}).state("editDevice",{url:"/devices/:deviceId/edit",templateUrl:"modules/devices/views/edit-device.client.view.html"})}]),angular.module("devices").controller("DevicesController",["$scope","$http","$stateParams","$location","Authentication","Devices","DeviceModels","Sparks","Notification",function($scope,$http,$stateParams,$location,Authentication,Devices,DeviceModels,Sparks,Notification){$scope.authentication=Authentication,$scope.loadData=function(){$scope.deviceModels=DeviceModels.query(),$scope.sparks=Sparks.query()},$scope.moveToAndSetCalibrationPoint=function(){$http.post("/devices/move_to_and_set_calibration_point",{device:$scope.device}).success(function(data,status,headers,config){console.log(data),Notification.success(data.result),$scope.device.$save()}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.setOnlineButtonText=function(){$scope.online?$scope.onlineText="Online":$scope.onlineText="Offline"},$scope.deviceModel={},$scope.spark={},$scope.openedMfg=!1,$scope.openedReg=!1,$scope.minRegDate=$scope.manufacturedOn,$scope.setRegMinDate=function(){$scope.minRegDate=$scope.manufacturedOn},$scope.selectDeviceModel=function(id){$scope.deviceModel._id=id},$scope.selectSpark=function(id){$scope.spark._id=id},$scope.openDatepicker=function($event,dateField){switch($event.preventDefault(),$event.stopPropagation(),dateField){case"mfg":$scope.openedMfg=!$scope.openedMfg;break;case"reg":$scope.openedReg=!$scope.openedReg}},$scope.create=function(){var device=new Devices({name:this.name,serialNumber:this.serialNumber,calibrationSteps:this.calibrationSteps,status:this.status,manufacturedOn:this.manufacturedOn,registeredOn:this.registeredOn,_deviceModel:this.deviceModel._id,_spark:this.spark._id});device.$save(function(response){$location.path("devices/"+response._id),$scope.name="",$scope.serialNumber="",$scope.calibrationSteps="",$scope.status="",$scope.manufacturedOn="",$scope.registeredOn="",$scope.deviceModel={},$scope.spark={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(device){if(device){device.$remove();for(var i in $scope.devices)$scope.devices[i]===device&&$scope.devices.splice(i,1)}else $scope.device.$remove(function(){$location.path("devices")})},$scope.update=function(){var device=$scope.device;device._deviceModel=$scope.deviceModel?$scope.deviceModel._id:"",device._spark=$scope.spark?$scope.spark._id:"",device.$update(function(){$location.path("devices/"+device._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.devices=Devices.query()},$scope.findOne=function(){$scope.device=Devices.get({deviceId:$stateParams.deviceId},function(){$scope.deviceModels=$scope.deviceModels||DeviceModels.query(),$scope.sparks=$scope.sparks||Sparks.query(),$scope.online=$scope.device._spark.connected,$scope.setOnlineButtonText(),$scope.deviceModel=$scope.device._deviceModel?$scope.device._deviceModel:{},$scope.spark=$scope.device._spark?$scope.device._spark:{}})}}]),ApplicationConfiguration.registerModule("devices"),angular.module("devices").factory("Devices",["$resource",function($resource){return $resource("devices/:deviceId",{deviceId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Devices Controller Tests",function(){var DevicesController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,DevicesController=$controller("DevicesController",{$scope:scope})})),it("$scope.find() should create an array with at least one Device object fetched from XHR",inject(function(Devices){var sampleDevice=new Devices({name:"New Device"}),sampleDevices=[sampleDevice];$httpBackend.expectGET("devices").respond(sampleDevices),scope.find(),$httpBackend.flush(),expect(scope.devices).toEqualData(sampleDevices)})),it("$scope.findOne() should create an array with one Device object fetched from XHR using a deviceId URL parameter",inject(function(Devices){var sampleDeviceModels=[],sampleSparks=[],sampleDevice=new Devices({name:"New Device"});$stateParams.deviceId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/devices\/([0-9a-fA-F]{24})$/).respond(sampleDevice),$httpBackend.expectGET(/device-models/).respond(sampleDeviceModels),$httpBackend.expectGET(/sparks/).respond(sampleSparks),scope.findOne(),$httpBackend.flush(),expect(scope.device).toEqualData(sampleDevice)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Devices){var sampleDevicePostData=new Devices({name:"New Device"}),sampleDeviceResponse=new Devices({_id:"525cf20451979dea2c000001",name:"New Device"});scope.name="New Device",$httpBackend.expectPOST("devices",sampleDevicePostData).respond(sampleDeviceResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/devices/"+sampleDeviceResponse._id)})),it("$scope.update() should update a valid Device",inject(function(Devices){var sampleDevicePutData=new Devices({_id:"525cf20451979dea2c000001",name:"New Device"});scope.device=sampleDevicePutData,$httpBackend.expectPUT(/devices\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/devices/"+sampleDevicePutData._id)})),it("$scope.remove() should send a DELETE request with a valid deviceId and remove the Device from the scope",inject(function(Devices){var sampleDevice=new Devices({_id:"525a8422f6d0f87f0e407a33"});scope.devices=[sampleDevice],$httpBackend.expectDELETE(/devices\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleDevice),$httpBackend.flush(),expect(scope.devices.length).toBe(0)}))})}(),angular.module("healthcare-providers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listHealthcareProviders",{url:"/healthcare-providers",templateUrl:"modules/healthcare-providers/views/list-healthcare-providers.client.view.html"}).state("createHealthcareProvider",{url:"/healthcare-providers/create",templateUrl:"modules/healthcare-providers/views/create-healthcare-provider.client.view.html"}).state("viewHealthcareProvider",{url:"/healthcare-providers/:healthcareProviderId",templateUrl:"modules/healthcare-providers/views/view-healthcare-provider.client.view.html"}).state("editHealthcareProvider",{url:"/healthcare-providers/:healthcareProviderId/edit",templateUrl:"modules/healthcare-providers/views/edit-healthcare-provider.client.view.html"})}]),angular.module("healthcare-providers").controller("HealthcareProvidersController",["$scope","$stateParams","$location","Authentication","HealthcareProviders",function($scope,$stateParams,$location,Authentication,HealthcareProviders){$scope.authentication=Authentication,$scope.addresses=[],$scope.addressTypes=["Main","Business","Clinic","Other"],$scope.addressTypes.forEach(function(a){$scope.addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})}),$scope.create=function(){var healthcareProvider=new HealthcareProviders({name:this.name,addresses:this.addresses});healthcareProvider.$save(function(response){$location.path("healthcare-providers/"+response._id),$scope.name="",$scope.addresses=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(healthcareProvider){if(healthcareProvider){healthcareProvider.$remove();for(var i in $scope.healthcareProviders)$scope.healthcareProviders[i]===healthcareProvider&&$scope.healthcareProviders.splice(i,1)}else $scope.healthcareProvider.$remove(function(){$location.path("healthcare-providers")})},$scope.update=function(){var healthcareProvider=$scope.healthcareProvider;healthcareProvider.addresses=$scope.addresses,healthcareProvider.$update(function(){$location.path("healthcare-providers/"+healthcareProvider._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.healthcareProviders=HealthcareProviders.query()},$scope.findOne=function(){$scope.healthcareProvider=HealthcareProviders.get({healthcareProviderId:$stateParams.healthcareProviderId},function(){$scope.addresses=$scope.healthcareProvider.addresses.length?$scope.healthcareProvider.addresses:$scope.addresses})}}]),ApplicationConfiguration.registerModule("healthcare-providers"),angular.module("healthcare-providers").factory("HealthcareProviders",["$resource",function($resource){return $resource("healthcare-providers/:healthcareProviderId",{healthcareProviderId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Healthcare providers Controller Tests",function(){var HealthcareProvidersController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,HealthcareProvidersController=$controller("HealthcareProvidersController",{$scope:scope})})),it("$scope.find() should create an array with at least one Healthcare provider object fetched from XHR",inject(function(HealthcareProviders){var sampleHealthcareProvider=new HealthcareProviders({name:"New Healthcare provider"}),sampleHealthcareProviders=[sampleHealthcareProvider];$httpBackend.expectGET("healthcare-providers").respond(sampleHealthcareProviders),scope.find(),$httpBackend.flush(),expect(scope.healthcareProviders).toEqualData(sampleHealthcareProviders)})),it("$scope.findOne() should create an array with one Healthcare provider object fetched from XHR using a healthcareProviderId URL parameter",inject(function(HealthcareProviders){var addresses=[];["Main","Business","Clinic","Other"].forEach(function(a){addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})});var sampleHealthcareProvider=new HealthcareProviders({name:"New Healthcare provider",addresses:addresses});$stateParams.healthcareProviderId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/healthcare-providers\/([0-9a-fA-F]{24})$/).respond(sampleHealthcareProvider),scope.findOne(),$httpBackend.flush(),expect(scope.healthcareProvider).toEqualData(sampleHealthcareProvider)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(HealthcareProviders){var addresses=[];["Main","Business","Clinic","Other"].forEach(function(a){addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})});var sampleHealthcareProviderPostData=new HealthcareProviders({name:"New Healthcare provider",addresses:addresses}),sampleHealthcareProviderResponse=new HealthcareProviders({_id:"525cf20451979dea2c000001",name:"New Healthcare provider"});scope.name="New Healthcare provider",$httpBackend.expectPOST("healthcare-providers",sampleHealthcareProviderPostData).respond(sampleHealthcareProviderResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/healthcare-providers/"+sampleHealthcareProviderResponse._id)})),it("$scope.update() should update a valid Healthcare provider",inject(function(HealthcareProviders){var sampleHealthcareProviderPutData=new HealthcareProviders({_id:"525cf20451979dea2c000001",name:"New Healthcare provider"});scope.healthcareProvider=sampleHealthcareProviderPutData,$httpBackend.expectPUT(/healthcare-providers\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/healthcare-providers/"+sampleHealthcareProviderPutData._id)})),it("$scope.remove() should send a DELETE request with a valid healthcareProviderId and remove the Healthcare provider from the scope",inject(function(HealthcareProviders){var sampleHealthcareProvider=new HealthcareProviders({_id:"525a8422f6d0f87f0e407a33"});scope.healthcareProviders=[sampleHealthcareProvider],$httpBackend.expectDELETE(/healthcare-providers\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleHealthcareProvider),$httpBackend.flush(),expect(scope.healthcareProviders.length).toBe(0)}))})}(),angular.module("manufacturers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listManufacturers",{url:"/manufacturers",templateUrl:"modules/manufacturers/views/list-manufacturers.client.view.html"}).state("createManufacturer",{url:"/manufacturers/create",templateUrl:"modules/manufacturers/views/create-manufacturer.client.view.html"}).state("viewManufacturer",{url:"/manufacturers/:manufacturerId",templateUrl:"modules/manufacturers/views/view-manufacturer.client.view.html"}).state("editManufacturer",{url:"/manufacturers/:manufacturerId/edit",templateUrl:"modules/manufacturers/views/edit-manufacturer.client.view.html"})}]),angular.module("manufacturers").controller("ManufacturersController",["$scope","$stateParams","$location","Authentication","Manufacturers",function($scope,$stateParams,$location,Authentication,Manufacturers){$scope.authentication=Authentication,$scope.addresses=[],$scope.addressTypes=["Main","Business","Operations","Other"],$scope.addressTypes.forEach(function(a){$scope.addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})}),$scope.create=function(){var manufacturer=new Manufacturers({name:this.name,addresses:this.addresses});manufacturer.$save(function(response){$location.path("manufacturers/"+response._id),$scope.name="",$scope.addresses=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(manufacturer){if(manufacturer){manufacturer.$remove();for(var i in $scope.manufacturers)$scope.manufacturers[i]===manufacturer&&$scope.manufacturers.splice(i,1)}else $scope.manufacturer.$remove(function(){$location.path("manufacturers")})},$scope.update=function(){var manufacturer=$scope.manufacturer;manufacturer.addresses=$scope.addresses,manufacturer.$update(function(){$location.path("manufacturers/"+manufacturer._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.manufacturers=Manufacturers.query()},$scope.findOne=function(){$scope.manufacturer=Manufacturers.get({manufacturerId:$stateParams.manufacturerId},function(){$scope.addresses=$scope.manufacturer.addresses.length?$scope.manufacturer.addresses:$scope.addresses})}}]),ApplicationConfiguration.registerModule("manufacturers"),angular.module("manufacturers").factory("Manufacturers",["$resource",function($resource){return $resource("manufacturers/:manufacturerId",{manufacturerId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Manufacturers Controller Tests",function(){var ManufacturersController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,ManufacturersController=$controller("ManufacturersController",{$scope:scope})})),it("$scope.find() should create an array with at least one Manufacturer object fetched from XHR",inject(function(Manufacturers){var sampleManufacturer=new Manufacturers({name:"New Manufacturer"}),sampleManufacturers=[sampleManufacturer];$httpBackend.expectGET("manufacturers").respond(sampleManufacturers),scope.find(),$httpBackend.flush(),expect(scope.manufacturers).toEqualData(sampleManufacturers)})),it("$scope.findOne() should create an array with one Manufacturer object fetched from XHR using a manufacturerId URL parameter",inject(function(Manufacturers){var addresses=[];["Main","Business","Operations","Other"].forEach(function(a){addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})});var sampleManufacturer=new Manufacturers({name:"New Manufacturer",addresses:addresses});$stateParams.manufacturerId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/manufacturers\/([0-9a-fA-F]{24})$/).respond(sampleManufacturer),scope.findOne(),$httpBackend.flush(),expect(scope.manufacturer).toEqualData(sampleManufacturer)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Manufacturers){var addresses=[];["Main","Business","Operations","Other"].forEach(function(a){addresses.push({location:a,street1:"",street2:"",city:"",state:"",zipcode:""})});var sampleManufacturerPostData=new Manufacturers({name:"New Manufacturer",addresses:addresses}),sampleManufacturerResponse=new Manufacturers({_id:"525cf20451979dea2c000001",name:"New Manufacturer"});scope.name="New Manufacturer",$httpBackend.expectPOST("manufacturers",sampleManufacturerPostData).respond(sampleManufacturerResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/manufacturers/"+sampleManufacturerResponse._id)})),it("$scope.update() should update a valid Manufacturer",inject(function(Manufacturers){var sampleManufacturerPutData=new Manufacturers({_id:"525cf20451979dea2c000001",name:"New Manufacturer"});scope.manufacturer=sampleManufacturerPutData,$httpBackend.expectPUT(/manufacturers\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/manufacturers/"+sampleManufacturerPutData._id)})),it("$scope.remove() should send a DELETE request with a valid manufacturerId and remove the Manufacturer from the scope",inject(function(Manufacturers){var sampleManufacturer=new Manufacturers({_id:"525a8422f6d0f87f0e407a33"});scope.manufacturers=[sampleManufacturer],$httpBackend.expectDELETE(/manufacturers\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleManufacturer),$httpBackend.flush(),expect(scope.manufacturers.length).toBe(0)}))})}(),angular.module("prescriptions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPrescriptions",{url:"/prescriptions",templateUrl:"modules/prescriptions/views/list-prescriptions.client.view.html"}).state("createPrescription",{url:"/prescriptions/create",templateUrl:"modules/prescriptions/views/create-prescription.client.view.html"}).state("viewPrescription",{url:"/prescriptions/:prescriptionId",templateUrl:"modules/prescriptions/views/view-prescription.client.view.html"}).state("editPrescription",{url:"/prescriptions/:prescriptionId/edit",templateUrl:"modules/prescriptions/views/edit-prescription.client.view.html"})}]);var _=window._;angular.module("prescriptions").controller("PrescriptionsController",["$scope","$stateParams","$location","Authentication","Prescriptions","Assays",function($scope,$stateParams,$location,Authentication,Prescriptions,Assays){function assaySort(a,b){return a.name>b.name?1:a.name<b.name?-1:0}$scope.authentication=Authentication,$scope.openedPres=!1,$scope.openedDOB=!1,$scope.prescriptionAssays=[],$scope.assays=Assays.query(),$scope.openDatepicker=function($event,dateField){switch($event.preventDefault(),$event.stopPropagation(),dateField){case"pres":$scope.openedPres=!$scope.openedPres;break;case"dob":$scope.openedDOB=!$scope.openedDOB}},$scope.prescribeAssay=function(id){var indx=_.findIndex($scope.prescriptionAssays,function(e){return e._id===id});-1===indx&&(indx=_.findIndex($scope.assays,function(e){return e._id===id}),$scope.prescriptionAssays.push($scope.assays[indx]),$scope.assays.splice(indx,1),$scope.prescriptionAssays.sort(assaySort),$scope.assays.sort(assaySort))},$scope.removePrescribedAssay=function(id){var indx=_.findIndex($scope.prescriptionAssays,function(e){return e._id===id});$scope.assays.push($scope.prescriptionAssays[indx]),$scope.prescriptionAssays.splice(indx,1),$scope.prescriptionAssays.sort(assaySort),$scope.assays.sort(assaySort)},$scope.create=function(){var prescription=new Prescriptions({name:this.name,prescribedOn:this.prescribedOn,comments:this.comments,patientNumber:this.patientNumber,patientGender:this.patientGender,patientDateOfBirth:this.patientDateOfBirth,_assays:_.pluck(this.prescriptionAssays,"_id")});prescription.$save(function(response){$location.path("#!")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(prescription){if(prescription){prescription.$remove();for(var i in $scope.prescriptions)$scope.prescriptions[i]===prescription&&$scope.prescriptions.splice(i,1)}else $scope.prescription.$remove(function(){$location.path("prescriptions")})},$scope.update=function(){var prescription=$scope.prescription;prescription._assays=_.pluck($scope.prescriptionAssays,"_id"),console.log(prescription),prescription.$update(function(){$location.path("/prescriptions/"+prescription._id),console.log(prescription)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.prescriptions=Prescriptions.query()},$scope.findOne=function(){$scope.prescription=Prescriptions.get({prescriptionId:$stateParams.prescriptionId},function(){$scope.prescription._assays&&$scope.prescription._assays.length&&$scope.prescription._assays.forEach(function(e){$scope.prescribeAssay(e._id)})})}}]),ApplicationConfiguration.registerModule("prescriptions"),angular.module("prescriptions").factory("Prescriptions",["$resource",function($resource){return $resource("prescriptions/:prescriptionId",{prescriptionId:"@_id"},{update:{method:"PUT"}})}]),function(){describe("Prescriptions Controller Tests",function(){var PrescriptionsController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,PrescriptionsController=$controller("PrescriptionsController",{$scope:scope})})),it("$scope.find() should create an array with at least one Prescription object fetched from XHR",inject(function(Prescriptions){var samplePrescription=new Prescriptions({name:"New Prescription"}),samplePrescriptions=[samplePrescription];$httpBackend.expectGET("prescriptions").respond(samplePrescriptions),scope.find(),$httpBackend.flush(),expect(scope.prescriptions).toEqualData(samplePrescriptions)})),it("$scope.findOne() should create an array with one Prescription object fetched from XHR using a prescriptionId URL parameter",inject(function(Prescriptions){var sampleAssays=[],samplePrescription=new Prescriptions({name:"New Prescription"});$stateParams.prescriptionId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/prescriptions\/([0-9a-fA-F]{24})$/).respond(samplePrescription),$httpBackend.expectGET(/assays/).respond(sampleAssays),scope.findOne(),$httpBackend.flush(),expect(scope.prescription).toEqualData(samplePrescription)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Prescriptions){var samplePrescriptionPostData=new Prescriptions({name:"New Prescription",_assays:[]}),samplePrescriptionResponse=new Prescriptions({_id:"525cf20451979dea2c000001",name:"New Prescription"});scope.name="New Prescription",$httpBackend.expectPOST("prescriptions",samplePrescriptionPostData).respond(samplePrescriptionResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/prescriptions/"+samplePrescriptionResponse._id)})),it("$scope.update() should update a valid Prescription",inject(function(Prescriptions){var samplePrescriptionPutData=new Prescriptions({_id:"525cf20451979dea2c000001",name:"New Prescription"});scope.prescription=samplePrescriptionPutData,$httpBackend.expectPUT(/prescriptions\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/prescriptions/"+samplePrescriptionPutData._id)})),it("$scope.remove() should send a DELETE request with a valid prescriptionId and remove the Prescription from the scope",inject(function(Prescriptions){var samplePrescription=new Prescriptions({_id:"525a8422f6d0f87f0e407a33"});scope.prescriptions=[samplePrescription],$httpBackend.expectDELETE(/prescriptions\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(samplePrescription),$httpBackend.flush(),expect(scope.prescriptions.length).toBe(0)}))})}(),angular.module("sparks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listSparks",{url:"/sparks",templateUrl:"modules/sparks/views/list-sparks.client.view.html"}).state("createSpark",{url:"/sparks/create",templateUrl:"modules/sparks/views/create-spark.client.view.html"}).state("viewSpark",{url:"/sparks/:sparkId",templateUrl:"modules/sparks/views/view-spark.client.view.html"}).state("editSpark",{url:"/sparks/:sparkId/edit",templateUrl:"modules/sparks/views/edit-spark.client.view.html"})}]),angular.module("sparks").controller("SparksController",["$scope","$http","$stateParams","$location","$timeout","Authentication","Sparks","Notification",function($scope,$http,$stateParams,$location,$timeout,Authentication,Sparks,Notification){$scope.authentication=Authentication,$scope.eraseArchivedData=function(){$http.post("/sparks/erase_archived_data",{spark:$scope.spark}).success(function(data,status,headers,config){console.log(data),1===data.return_value&&Notification.success("Archive erased")}).error(function(err,status,headers,config){console.log(err),$scope.deviceInitialized=!1,Notification.error(err.message)})},$scope.getNumberOfRecords=function(){$http.post("/sparks/archive_size",{spark:$scope.spark}).success(function(data,status,headers,config){console.log(data),-1!==data.return_value&&Notification.success("Archive contains "+data.return_value+" records")}).error(function(err,status,headers,config){console.log(err),$scope.deviceInitialized=!1,Notification.error(err.message)})},$scope.getFirstRecord=function(){$http.post("/sparks/record_by_index",{spark:$scope.spark,index:0}).success(function(data,status,headers,config){console.log(data),$scope.rawData=JSON.parse(data)}).error(function(err,status,headers,config){console.log(err),$scope.deviceInitialized=!1,Notification.error(err.message)})},$scope.reflash=function(){$http.post("/sparks/reflash",{spark:$scope.spark}).success(function(data,status,headers,config){Notification.success("Firmware flashed successfully")}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.create=function(){var spark=new Sparks({name:this.name,sparkID:this.sparkID});spark.$save(function(response){$location.path("sparks/"+response._id),$scope.name="",$scope.sparkID=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(spark){if(spark){spark.$remove();
for(var i in $scope.sparks)$scope.sparks[i]===spark&&$scope.sparks.splice(i,1)}else $scope.spark.$remove(function(){$location.path("sparks")})},$scope.update=function(){var spark=$scope.spark;spark.$update(function(){$location.path("sparks/"+spark._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.refresh=function(){$http.get("/sparks/refresh").success(function(data,status,headers,config){$scope.sparks=data,Notification.success("Spark list refreshed")}).error(function(err,status,headers,config){console.log(err,status,headers(),config),Notification.danger(err.message)})},$scope.find=function(){$scope.sparks=Sparks.query()},$scope.findOne=function(){$scope.spark=Sparks.get({sparkId:$stateParams.sparkId})}}]);var sparkSensorHeader="<tr><th>Sensor</th><th>Type</th><th>Reading Date<br/>Reading Time</th><th>Value</th></tr>",int_time={0:"700ms",192:"154ms",213:"101ms",235:"50ms",246:"24ms",255:"2.4ms"},gain={0:"1X",1:"4X",2:"16X",3:"64X"};angular.module("sparks").filter("rawtestdata",[function(){return function(input){var out;return angular.isString(input)&&(input=input||"",out=parse_test_data(input)),out}}]),angular.module("sparks").factory("Sparks",["$resource",function($resource){return $resource("sparks/:sparkId",{sparkId:"@_id"},{update:{method:"PUT"}})}]),ApplicationConfiguration.registerModule("sparks"),function(){describe("Sparks Controller Tests",function(){var SparksController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,SparksController=$controller("SparksController",{$scope:scope})})),it("$scope.find() should create an array with at least one Spark object fetched from XHR",inject(function(Sparks){var sampleSpark=new Sparks({name:"New Spark",sparkID:"525a8422f6d0f87f0e407a33"}),sampleSparks=[sampleSpark];$httpBackend.expectGET("sparks").respond(sampleSparks),scope.find(),$httpBackend.flush(),expect(scope.sparks).toEqualData(sampleSparks)})),it("$scope.findOne() should create an array with one Spark object fetched from XHR using a sparkId URL parameter",inject(function(Sparks){var sampleSpark=new Sparks({name:"New Spark",sparkID:"525a8422f6d0f87f0e407a33"});$stateParams.sparkId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/sparks\/([0-9a-fA-F]{24})$/).respond(sampleSpark),scope.findOne(),$httpBackend.flush(),expect(scope.spark).toEqualData(sampleSpark)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Sparks){var sampleSparkPostData=new Sparks({name:"New Spark",sparkID:"525a8422f6d0f87f0e407a33"}),sampleSparkResponse=new Sparks({_id:"525cf20451979dea2c000001",name:"New Spark",sparkID:"525a8422f6d0f87f0e407a33"});scope.name="New Spark",scope.sparkID="525a8422f6d0f87f0e407a33",$httpBackend.expectPOST("sparks",sampleSparkPostData).respond(sampleSparkResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect(scope.sparkID).toEqual(""),expect($location.path()).toBe("/sparks/"+sampleSparkResponse._id)})),it("$scope.update() should update a valid Spark",inject(function(Sparks){var sampleSparkPutData=new Sparks({_id:"525cf20451979dea2c000001",name:"New Spark"});scope.spark=sampleSparkPutData,$httpBackend.expectPUT(/sparks\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/sparks/"+sampleSparkPutData._id)})),it("$scope.remove() should send a DELETE request with a valid sparkId and remove the Spark from the scope",inject(function(Sparks){var sampleSpark=new Sparks({_id:"525a8422f6d0f87f0e407a33"});scope.sparks=[sampleSpark],$httpBackend.expectDELETE(/sparks\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleSpark),$httpBackend.flush(),expect(scope.sparks.length).toBe(0)}))})}(),angular.module("tests").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTests",{url:"/tests",templateUrl:"modules/tests/views/list-tests.client.view.html"}).state("loadTests",{url:"/tests/load",css:"modules/tests/css/review-test.client.css",templateUrl:"modules/tests/views/review-test.client.view.html"}).state("createTest",{url:"/tests/create",templateUrl:"modules/tests/views/create-test.client.view.html"}).state("runTests",{url:"/tests/run",templateUrl:"modules/tests/views/run-test.client.view.html"}).state("monitorTests",{url:"/tests/monitor",templateUrl:"modules/tests/views/monitor-test.client.view.html"}).state("reviewTests",{url:"/tests/review",css:"modules/tests/css/review-test.client.css",templateUrl:"modules/tests/views/review-test.client.view.html"}).state("viewTest",{url:"/tests/:testId",templateUrl:"modules/tests/views/view-test.client.view.html"}).state("editTest",{url:"/tests/:testId/edit",templateUrl:"modules/tests/views/edit-test.client.view.html"})}]);var _=window._;angular.module("tests").controller("MonitorTestController",["$scope","$http","$timeout","Tests","Notification","Socket",function($scope,$http,$timeout,Tests,Notification,Socket){$scope.setup=function(){$http.get("/tests/recently_started").success(function(data,status,headers,config){$scope.tests=data}).error(function(err,status,headers,config){Notification.error(err.message)}),Socket.on("test.update",function(message){console.log("websocket message",message);var data=message.split("\n");$scope.tests.forEach(function(e,i){e._cartridge._id===data[1]&&(e.percentComplete=parseInt(data[2]),e.status=data[0].length?data[0]:e.status)})})},$scope.cancelTest=function(index){var test=$scope.tests[index];$http.post("/tests/cancel",{testID:test._id,cartridgeID:test._cartridge._id,deviceID:test._device._id}).success(function(data,status,headers,config){console.log(data),test.status="Cancelled",Notification.success("Test cancelled")}).error(function(err,status,headers,config){Notification.error(err.message)})}}]);var _=window._,c3=window.c3,d3=window.d3;angular.module("tests").controller("ReviewTestController",["$scope","$http","Tests","Sparks","Notification",function($scope,$http,Tests,Sparks,Notification){$scope.loadGraph=function(index){var test=$scope.tests[index],a=test._assay.analysis,std=test._assay.standardCurve,cuts=[a.redMin,a.greenMin,a.greenMax,a.redMax],xs=_.pluck(std,"x"),ys=_.pluck(std,"y"),standardScale=d3.scale.linear().domain(xs).range(ys),resultY=standardScale(test._cartridge.result);xs.splice(0,0,"Standard Curve X"),ys.splice(0,0,"Standard Curve");c3.generate({bindto:"#testgraph"+index,padding:{top:10,right:40,bottom:10,left:30},data:{xs:{"Standard Curve":"Standard Curve X","This Test":"This Test X"},columns:[xs,["This Test X",test._cartridge.result],ys,["This Test",resultY]],type:"spline",axes:{"Standard Curve":"y"}},zoom:{enabled:!0},point:{r:function(d){return"This Test"===d.id?10:1}},legend:{position:"bottom"},axis:{x1:{label:"Standard Curve",type:"linear",count:8},x2:{label:"This Test",type:"linear",count:8},y:{label:"Test Results"}},regions:[{axis:"y",end:cuts[0],"class":"positive"},{axis:"y",start:cuts[0],end:cuts[1],"class":"borderline"},{axis:"y",start:cuts[1],end:cuts[2],"class":"negative"},{axis:"y",start:cuts[2],end:cuts[3],"class":"borderline"},{axis:"y",start:cuts[3],"class":"positive"}]})},$scope.currentPage=0,$scope.pageChanged=function(){$scope.load()},$scope.load=function(){$http.post("/tests/load",{page:$scope.currentPage,pageSize:$scope.itemsPerPage}).success(function(data,status,headers,config){$scope.tests=data.tests,$scope.totalItems=data.total_count}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.updateTest=function(index){var test=$scope.tests[index],body={testID:test._id,cartridgeID:test._cartridge._id,deviceID:test._device._id,analysis:test._assay.analysis,standardCurve:test._assay.standardCurve,percentComplete:test.percentComplete,state:test.status};$http.post("/tests/update_one_test",body).success(function(data,status,headers,config){test.reading=data.reading,test.result=data.result,test.startedOn=Date(data.startedOn),test.finishedOn=Date(data.finishedOn),test.percentComplete=data.percentComplete,test._cartridge.rawData=data.rawData,test._cartridge.result=data.value,test._cartridge.startedOn=Date(data.startedOn),test._cartridge.finishedOn=Date(data.finishedOn),test._cartridge.failed=data.failed}).error(function(err,status,headers,config){Notification.error(err.message)}),Notification.success("Test record updating")},$scope.loadRawData=function(cartridgeID){$http.post("/sparks/record_by_cartridge_id",{cartridgeID:cartridgeID}).success(function(data,status,headers,config){$scope.tests.forEach(function(e){e._cartridge._id===cartridgeID&&(e._cartridge.rawData=JSON.parse(data))})}).error(function(err,status,headers,config){Notification.error(err.message)}),Notification.info("Loading data from device")}}]),angular.module("tests").controller("RunTestController",["$scope","$http","Tests","Prescriptions","Devices","Cartridges","Notification",function($scope,$http,Tests,Prescriptions,Devices,Cartridges,Notification){$scope.setupRun=function(){$scope.testUnderway=!1,$scope.activePrescription=-1,$scope.activeAssay=-1,$scope.deviceInitialized=!1,$scope.activeDevice=-1,$scope.activeCartridge=-1,$scope.prescriptions=Prescriptions.query(),$http.get("/devices/available").success(function(data,status,headers,config){$scope.devices=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.clickPrescription=function(indx){$scope.activePrescription=indx},$scope.clickAssay=function(indx){$scope.activeAssay=indx,$http.post("/cartridges/unused",{assayID:$scope.prescriptions[$scope.activePrescription]._assays[$scope.activeAssay]._id}).success(function(data,status,headers,config){$scope.cartridges=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})},$scope.clickDevice=function(indx){$scope.activeDevice=indx},$scope.clickCartridge=function(indx){$scope.activeCartridge=indx},$scope.scanCartridge=function(){$scope.activeCartridge=$scope.activeCartridge},$scope.initializeDevice=function(){return $scope.activeDevice<0?void Notification.error("Please select a device to initialize"):$scope.devices[$scope.activeDevice]?($scope.testUnderway=!1,$http.post("/devices/initialize",{device:$scope.devices[$scope.activeDevice]}).success(function(data,status,headers,config){$scope.deviceInitialized=!0}).error(function(err,status,headers,config){console.log(err),$scope.deviceInitialized=!1,Notification.error(err.message)}),void Notification.success("Initialization started")):void Notification.error("Unknown device")},$scope.beginTest=function(){if($scope.activePrescription<0||$scope.activeAssay<0)return void Notification.error("Please select an assay for testing");if($scope.activeDevice<0)return void Notification.error("Please select a device for testing");if($scope.activeCartridge<0)return void Notification.error("Please select a cartridge for testing");if(!$scope.prescriptions[$scope.activePrescription]._assays[$scope.activeAssay])return void Notification.error("Unknown assay");if(!$scope.devices[$scope.activeDevice])return void Notification.error("Unknown device");if(!$scope.cartridges[$scope.activeCartridge])return void Notification.error("Unknown cartridge");var assay=$scope.prescriptions[$scope.activePrescription]._assays[$scope.activeAssay],cartridge=$scope.cartridges[$scope.activeCartridge],device=$scope.devices[$scope.activeDevice],prescription=$scope.prescriptions[$scope.activePrescription];$http.post("/tests/begin",{assayID:assay._id,assayName:assay.name,assayBCODE:assay.BCODE,analysis:assay.analysis,standardCurve:assay.standardCurve,cartridgeID:cartridge._id,deviceID:device._id,deviceName:device.name,prescriptionID:prescription._id}).success(function(data,status,headers,config){console.log("Test begun",data),Notification.success("Test underway"),$scope.testUnderway=!0,$http.post("/cartridges/unused",{assayID:assay._id}).success(function(data,status,headers,config){$scope.cartridges=data}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)})}).error(function(err,status,headers,config){console.log(err),Notification.error(err.message)}),Notification.info("Test started")}}]),angular.module("tests").controller("TestsController",["$scope","$stateParams","$location","$http","Authentication","Tests","Assays",function($scope,$stateParams,$location,$http,Authentication,Tests,Assays){$scope.authentication=Authentication,$scope.showResultsOnOpen=!0,$scope.create=function(){var test=new Tests({name:this.name,description:this.description});test.$save(function(response){$location.path("tests/"+response._id),$scope.name="",$scope.description=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(test){if(test){test.$remove();for(var i in $scope.tests)$scope.tests[i]===test&&$scope.tests.splice(i,1)}else $scope.test.$remove(function(){$location.path("tests")})},$scope.update=function(){var test=$scope.test;test.$update(function(){$location.path("tests/"+test._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.tests=Tests.query()},$scope.findOne=function(){$scope.test=Tests.get({testId:$stateParams.testId})}}]),angular.module("tests").factory("Tests",["$resource",function($resource){return $resource("tests/:testId",{testId:"@_id"},{update:{method:"PUT"}})}]),ApplicationConfiguration.registerModule("tests"),function(){describe("Run test Controller Tests",function(){var RunTestController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,RunTestController=$controller("RunTestController",{$scope:scope})})),it("Should do some controller test",inject(function(){}))})}(),function(){describe("Tests Controller Tests",function(){var TestsController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,TestsController=$controller("TestsController",{$scope:scope})})),it("$scope.find() should create an array with at least one Test object fetched from XHR",inject(function(Tests){var sampleTest=new Tests({name:"New Test"}),sampleTests=[sampleTest];$httpBackend.expectGET("tests").respond(sampleTests),scope.find(),$httpBackend.flush(),expect(scope.tests).toEqualData(sampleTests)})),it("$scope.findOne() should create an array with one Test object fetched from XHR using a testId URL parameter",inject(function(Tests){var sampleTest=new Tests({name:"New Test"});$stateParams.testId="525a8422f6d0f87f0e407a33",$httpBackend.expectGET(/tests\/([0-9a-fA-F]{24})$/).respond(sampleTest),scope.findOne(),$httpBackend.flush(),expect(scope.test).toEqualData(sampleTest)})),it("$scope.create() with valid form data should send a POST request with the form input values and then locate to new object URL",inject(function(Tests){var sampleTestPostData=new Tests({name:"New Test"}),sampleTestResponse=new Tests({_id:"525cf20451979dea2c000001",name:"New Test"});scope.name="New Test",$httpBackend.expectPOST("tests",sampleTestPostData).respond(sampleTestResponse),scope.create(),$httpBackend.flush(),expect(scope.name).toEqual(""),expect($location.path()).toBe("/tests/"+sampleTestResponse._id)})),it("$scope.update() should update a valid Test",inject(function(Tests){var sampleTestPutData=new Tests({_id:"525cf20451979dea2c000001",name:"New Test"});scope.test=sampleTestPutData,$httpBackend.expectPUT(/tests\/([0-9a-fA-F]{24})$/).respond(),scope.update(),$httpBackend.flush(),expect($location.path()).toBe("/tests/"+sampleTestPutData._id)})),it("$scope.remove() should send a DELETE request with a valid testId and remove the Test from the scope",inject(function(Tests){var sampleTest=new Tests({_id:"525a8422f6d0f87f0e407a33"});scope.tests=[sampleTest],$httpBackend.expectDELETE(/tests\/([0-9a-fA-F]{24})$/).respond(204),scope.remove(sampleTest),$httpBackend.flush(),expect(scope.tests.length).toBe(0)}))})}(),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),function(){describe("AuthenticationController",function(){var AuthenticationController,scope,$httpBackend,$stateParams,$location;beforeEach(function(){jasmine.addMatchers({toEqualData:function(util,customEqualityTesters){return{compare:function(actual,expected){return{pass:angular.equals(actual,expected)}}}}})}),beforeEach(module(ApplicationConfiguration.applicationModuleName)),beforeEach(inject(function($controller,$rootScope,_$location_,_$stateParams_,_$httpBackend_){scope=$rootScope.$new(),$stateParams=_$stateParams_,$httpBackend=_$httpBackend_,$location=_$location_,AuthenticationController=$controller("AuthenticationController",{$scope:scope})})),it("$scope.signin() should login with a correct user and password",function(){$httpBackend.when("POST","/auth/signin").respond(200,"Fred"),scope.signin(),$httpBackend.flush(),expect(scope.authentication.user).toEqual("Fred"),expect($location.url()).toEqual("/")}),it("$scope.signin() should fail to log in with nothing",function(){$httpBackend.expectPOST("/auth/signin").respond(400,{message:"Missing credentials"}),scope.signin(),$httpBackend.flush(),expect(scope.error).toEqual("Missing credentials")}),it("$scope.signin() should fail to log in with wrong credentials",function(){scope.authentication.user="Foo",scope.credentials="Bar",$httpBackend.expectPOST("/auth/signin").respond(400,{message:"Unknown user"}),scope.signin(),$httpBackend.flush(),expect(scope.error).toEqual("Unknown user")}),it("$scope.signup() should register with correct data",function(){scope.authentication.user="Fred",$httpBackend.when("POST","/auth/signup").respond(200,"Fred"),scope.signup(),$httpBackend.flush(),expect(scope.authentication.user).toBe("Fred"),expect(scope.error).toEqual(void 0),expect($location.url()).toBe("/")}),it("$scope.signup() should fail to register with duplicate Username",function(){$httpBackend.when("POST","/auth/signup").respond(400,{message:"Username already exists"}),scope.signup(),$httpBackend.flush(),expect(scope.error).toBe("Username already exists")})})}(),ApplicationConfiguration.registerModule("users");